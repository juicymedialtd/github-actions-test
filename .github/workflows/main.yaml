#Draft test
name: CI/CD Workflow

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{github.repository}}
  AWS_DEFAULT_REGION: 'eu-west-2'
  ECS_CLUSTER: 'wordpress-terraform-dev'
  ECS_SERVICE: 'wordpress-terraform-dev'

on:
  push:
    branches:
      - main
    tags:
      - '**'
  pull_request:
    branches:
      - '**'

jobs:
  npm:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: 20
          cache: "npm"
          cache-dependency-path: './wordpress/wp-content/themes/juicystrap/package-lock.json'

      - name: Install dependencies
        run: |
          cd ./wordpress/wp-content/themes/juicystrap
          rm -rf node_modules
          npm install

  build-assets:
    runs-on: ubuntu-latest
    needs: npm
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: 20
          cache: "npm"
          cache-dependency-path: './wordpress/wp-content/themes/juicystrap/package-lock.json'

      - name: Install dependencies
        run: |
          cd ./wordpress/wp-content/themes/juicystrap
          npm install

      - name: Build assets
        run: |
          cd ./wordpress/wp-content/themes/juicystrap
          npm run production

  prettier:
    runs-on: ubuntu-latest
    needs: npm
    if: github.event.pull_request.draft == false || github.event.pull_request.draft == null
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: 20
          cache: "npm"
          cache-dependency-path: './wordpress/wp-content/themes/juicystrap/package-lock.json'

      - name: Install dependencies
        run: |
          cd ./wordpress/wp-content/themes/juicystrap
          npm install

      - name: Run Prettier
        run: |
          cd ./wordpress/wp-content/themes/juicystrap
          npm run lint:prettier

  eslint:
    runs-on: ubuntu-latest
    needs: npm
    if: github.event.pull_request.draft == false || github.event.pull_request.draft == null
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: 20
          cache: "npm"
          cache-dependency-path: './wordpress/wp-content/themes/juicystrap/package-lock.json'

      - name: Install dependencies
        run: |
          cd ./wordpress/wp-content/themes/juicystrap
          npm install

      - name: Run ESLint
        run: |
          cd ./wordpress/wp-content/themes/juicystrap
          npm run lint:js

  stylelint:
    runs-on: ubuntu-latest
    needs: npm
    if: github.event.pull_request.draft == false || github.event.pull_request.draft == null
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: 20
          cache: "npm"
          cache-dependency-path: './wordpress/wp-content/themes/juicystrap/package-lock.json'

      - name: Install dependencies
        run: |
          cd ./wordpress/wp-content/themes/juicystrap
          npm install

      - name: Run StyleLint
        run: |
          cd ./wordpress/wp-content/themes/juicystrap
          npm run lint:style

  build-docker:
    runs-on: ubuntu-latest
    needs: [build-assets, prettier, eslint, stylelint]
    if: startsWith(github.ref_name, 'v') && !contains(github.ref_name, ' ') && (endsWith(github.ref_name, '-stage') || endsWith(github.ref_name, '-production'))
    
    permissions:
      contents: read
      packages: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set environment variables
        run: |
          if [[ ${{ github.ref_name }} =~ ^v[^\s]+-production$ ]]; then
            echo "ENVIRONMENT=production" >> $GITHUB_ENV
          elif [[ ${{ github.ref_name }} =~ ^v[^\s]+-stage$ ]]; then
            echo "ENVIRONMENT=stage" >> $GITHUB_ENV
          else
            echo "Undefined environment in tag"
            echo "ENVIRONMENT=undefined" >> $GITHUB_ENV
          fi

          echo "TRIMMED_GITHUB_REF=$(echo "${{ github.ref_name }}" | cut -c2-)" >> $GITHUB_ENV

      - name: Log in to the Container registry
        uses: docker/login-action@v1
        with: 
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v1
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Build and push Docker image
        run: |
          docker build -t "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.TRIMMED_GITHUB_REF }}" -t "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.ENVIRONMENT }}" .  --platform linux/amd64
          if [ "${{ env.ENVIRONMENT }}" == "production" ]; then docker tag "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.TRIMMED_GITHUB_REF }}" "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"; fi
          docker push --all-tags "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}"


  deploy:
    runs-on: ubuntu-latest
    needs: build-docker
    if: startsWith(github.ref_name, 'v') && !contains(github.ref_name, ' ') && (endsWith(github.ref_name, '-stage') || endsWith(github.ref_name, '-production'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: ${{ secrets.ROLE_ARN }}
          role-session-name: samplerolesession
          aws-region: ${{ env.AWS_DEFAULT_REGION }}

      - name: Deploy to AWS ECS
        run: |
          aws ecs update-service --cluster ${{ env.ECS_CLUSTER }} --service ${{ env.ECS_SERVICE }} --force-new-deployment --no-cli-pager
        if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.action == 'closed' && github.event_name != 'delete')